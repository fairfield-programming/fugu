/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The architecture's name.
 */
export type ArchitectureName = string;
/**
 * A description of the architecture.
 */
export type ArchitectureDescription = string;
/**
 * The starting year of the project.
 */
export type FoundingDate = number;
/**
 * Describes wether the architecture is little endian or big endian.
 */
export type EndianNess = "little" | "big";
/**
 * The number of bits that the architecture supports.
 */
export type NumberOfBits = number;
/**
 * This is the number of bytes in the entire memory.
 */
export type NumberOfBytesInTheMemory = number;
/**
 * The name of the register.
 */
export type RegisterName = string;
/**
 * A description of the register.
 */
export type RegisterDescription = string;
/**
 * The registers that the architecture supports.
 */
export type RegisterData = Register[];
/**
 * The type of instruction.
 */
export type InstructionType = "BREAK" | "ADD" | "OR" | "1B_LEFT_SHIFT" | "PUSH_SR";
/**
 * The name of the instruction.
 */
export type InstructionName = string;
/**
 * A description of the instruction.
 */
export type InstructionDescription = string;
/**
 * Describes what mode the instruction uses.
 */
export type InstructionMode = string;
/**
 * The number of bytes that the instruction consists of.
 */
export type NumberOfBytes = number;
/**
 * The opcode of the instruction.
 */
export type Opcode = string;
/**
 * The assembler code for the instruction.
 */
export type AssemblerString = string;
/**
 * The number of cycles that it takes the instruction to be run.
 */
export type CycleLength = number;
/**
 * The minimum number of cycles that it takes for the instruction to be run.
 */
export type MinimumCycleLength = number;
/**
 * The maximum number of cycles that it takes for the instruction to be run.
 */
export type MaximumCycleLength = number;
/**
 * The instructions that the architecture supports.
 */
export type Instructions = {
  type?: InstructionType;
  name?: InstructionName;
  description?: InstructionDescription;
  mode?: InstructionMode;
  bytes?: NumberOfBytes;
  opcode?: Opcode;
  assembler?: AssemblerString;
  cycles?: CycleLength;
  minCycles?: MinimumCycleLength;
  maxCycles?: MaximumCycleLength;
  inputs?: Location[];
  output?: Location;
}[];

export interface Architecture {
  $schema?: unknown;
  name: ArchitectureName;
  description?: ArchitectureDescription;
  year?: FoundingDate;
  endian?: EndianNess;
  bits?: NumberOfBits;
  memoryBytes?: NumberOfBytesInTheMemory;
  registers: RegisterData;
  instructions: Instructions;
}
export interface Register {
  name?: RegisterName;
  description?: RegisterDescription;
}
export interface Location {
  type?: "constant" | "register";
  registerName?: string;
}
